{
  "Items": [
    {
      "Query": "plot of valina x4 foundations",
      "ExecutedDateTime": "2023-12-27T00:03:29.9191077+01:00"
    },
    {
      "Query": "steam when can i refund the game",
      "ExecutedDateTime": "2023-12-27T00:07:46.3232937+01:00"
    },
    {
      "Query": "stea",
      "ExecutedDateTime": "2023-12-27T17:31:33.5076834+01:00"
    },
    {
      "Query": "brave",
      "ExecutedDateTime": "2023-12-27T17:33:46.6805553+01:00"
    },
    {
      "Query": "stea",
      "ExecutedDateTime": "2023-12-27T18:07:34.6481295+01:00"
    },
    {
      "Query": "resta",
      "ExecutedDateTime": "2023-12-27T18:15:16.579568+01:00"
    },
    {
      "Query": "br",
      "ExecutedDateTime": "2023-12-27T18:16:45.5106514+01:00"
    },
    {
      "Query": "measure router traffic",
      "ExecutedDateTime": "2023-12-27T18:17:55.4397269+01:00"
    },
    {
      "Query": "stea",
      "ExecutedDateTime": "2023-12-27T18:20:30.7838171+01:00"
    },
    {
      "Query": "moba",
      "ExecutedDateTime": "2023-12-27T18:59:26.1910478+01:00"
    },
    {
      "Query": "inte",
      "ExecutedDateTime": "2023-12-27T18:59:35.7610871+01:00"
    },
    {
      "Query": "bra",
      "ExecutedDateTime": "2023-12-27T19:49:10.697859+01:00"
    },
    {
      "Query": "stea",
      "ExecutedDateTime": "2023-12-27T19:50:30.8737758+01:00"
    },
    {
      "Query": "term",
      "ExecutedDateTime": "2023-12-28T00:34:41.7681083+01:00"
    },
    {
      "Query": "task ma",
      "ExecutedDateTime": "2023-12-29T13:17:57.8058003+01:00"
    },
    {
      "Query": "shu",
      "ExecutedDateTime": "2023-12-29T13:18:51.4992703+01:00"
    },
    {
      "Query": "rpi",
      "ExecutedDateTime": "2023-12-29T15:06:46.0351329+01:00"
    },
    {
      "Query": "un ras",
      "ExecutedDateTime": "2023-12-29T15:07:05.2611433+01:00"
    },
    {
      "Query": "ter",
      "ExecutedDateTime": "2023-12-29T15:07:09.1778742+01:00"
    },
    {
      "Query": "bra",
      "ExecutedDateTime": "2023-12-29T15:07:12.61276+01:00"
    },
    {
      "Query": "stea",
      "ExecutedDateTime": "2023-12-29T15:07:23.3256475+01:00"
    },
    {
      "Query": "rpi imager",
      "ExecutedDateTime": "2023-12-29T15:08:19.6990555+01:00"
    },
    {
      "Query": "test sound and micro",
      "ExecutedDateTime": "2023-12-29T15:11:18.0025517+01:00"
    },
    {
      "Query": "sound",
      "ExecutedDateTime": "2023-12-29T15:11:24.8688243+01:00"
    },
    {
      "Query": "amazon",
      "ExecutedDateTime": "2023-12-29T15:12:02.9855224+01:00"
    },
    {
      "Query": "speedtest.net",
      "ExecutedDateTime": "2023-12-29T15:14:44.1956511+01:00"
    },
    {
      "Query": "ASUS Prime B760M-A D4 manual",
      "ExecutedDateTime": "2023-12-29T15:24:25.2537918+01:00"
    },
    {
      "Query": "ASUS Prime H610M-K D4 manual",
      "ExecutedDateTime": "2023-12-29T15:27:31.0379666+01:00"
    },
    {
      "Query": "ste",
      "ExecutedDateTime": "2023-12-29T18:01:42.4402471+01:00"
    },
    {
      "Query": "brave",
      "ExecutedDateTime": "2023-12-30T21:42:34.5231951+01:00"
    },
    {
      "Query": "youtube.com",
      "ExecutedDateTime": "2023-12-30T21:42:41.8212075+01:00"
    },
    {
      "Query": "vattenfall.de/treuevorteil",
      "ExecutedDateTime": "2023-12-30T21:50:17.2639554+01:00"
    },
    {
      "Query": "vorteilscode reddit",
      "ExecutedDateTime": "2023-12-30T21:51:34.6195569+01:00"
    },
    {
      "Query": "vattenfall.de",
      "ExecutedDateTime": "2023-12-30T21:52:41.6722759+01:00"
    },
    {
      "Query": "34.07/100",
      "ExecutedDateTime": "2023-12-30T21:59:43.307399+01:00"
    },
    {
      "Query": "wertbau immobilienmanagement",
      "ExecutedDateTime": "2023-12-30T22:13:38.8170917+01:00"
    },
    {
      "Query": "amazon.de",
      "ExecutedDateTime": "2023-12-30T22:21:05.9446953+01:00"
    },
    {
      "Query": "bra",
      "ExecutedDateTime": "2023-12-31T00:05:39.3754786+01:00"
    },
    {
      "Query": "netflix",
      "ExecutedDateTime": "2023-12-31T00:06:29.1490262+01:00"
    },
    {
      "Query": "brave",
      "ExecutedDateTime": "2024-01-01T12:58:55.5134511+01:00"
    },
    {
      "Query": "youtube.com",
      "ExecutedDateTime": "2024-01-01T13:02:44.8235578+01:00"
    },
    {
      "Query": "clickup.com",
      "ExecutedDateTime": "2024-01-01T13:07:13.3406429+01:00"
    },
    {
      "Query": "thermostat ersetzen heizk\u00F6rper",
      "ExecutedDateTime": "2024-01-01T13:23:50.0197421+01:00"
    },
    {
      "Query": "youtube.com",
      "ExecutedDateTime": "2024-01-01T13:44:24.7729379+01:00"
    },
    {
      "Query": "wie ich heizungsverbrauch berechne",
      "ExecutedDateTime": "2024-01-01T13:55:58.7582794+01:00"
    },
    {
      "Query": "z\u00E4hlerstand heizk\u00F6rper",
      "ExecutedDateTime": "2024-01-01T13:57:23.0900707+01:00"
    },
    {
      "Query": "was werte auf dem heizk\u00F6rper bedeuten einheiten",
      "ExecutedDateTime": "2024-01-01T14:06:46.7279173+01:00"
    },
    {
      "Query": "stea",
      "ExecutedDateTime": "2024-01-01T14:09:19.4760801+01:00"
    },
    {
      "Query": "bra",
      "ExecutedDateTime": "2024-01-01T14:14:00.209388+01:00"
    },
    {
      "Query": "steam",
      "ExecutedDateTime": "2024-01-01T14:16:38.1168488+01:00"
    },
    {
      "Query": "bro",
      "ExecutedDateTime": "2024-01-01T14:17:47.8283388+01:00"
    },
    {
      "Query": "xte",
      "ExecutedDateTime": "2024-01-01T14:21:05.2863404+01:00"
    },
    {
      "Query": "cups list printer drivers",
      "ExecutedDateTime": "2024-01-01T14:24:21.0837702+01:00"
    },
    {
      "Query": "check ports for listening",
      "ExecutedDateTime": "2024-01-01T14:30:44.4759091+01:00"
    },
    {
      "Query": "ter",
      "ExecutedDateTime": "2024-01-01T14:33:36.5608909+01:00"
    },
    {
      "Query": "netflix.com",
      "ExecutedDateTime": "2024-01-01T14:36:17.304916+01:00"
    },
    {
      "Query": "ping request time out",
      "ExecutedDateTime": "2024-01-01T14:43:26.6705459+01:00"
    },
    {
      "Query": "ports linux listening",
      "ExecutedDateTime": "2024-01-01T14:51:27.5102671+01:00"
    },
    {
      "Query": "cupsctl -h 0.0.0.0:631 bad request",
      "ExecutedDateTime": "2024-01-01T14:52:40.7818352+01:00"
    },
    {
      "Query": "systemctl freezes",
      "ExecutedDateTime": "2024-01-01T14:54:31.0661876+01:00"
    },
    {
      "Query": "systemctl restart cups freezes",
      "ExecutedDateTime": "2024-01-01T14:54:40.2021789+01:00"
    },
    {
      "Query": "system service log",
      "ExecutedDateTime": "2024-01-01T14:55:13.4116816+01:00"
    },
    {
      "Query": "Upgrade Required cups",
      "ExecutedDateTime": "2024-01-01T14:57:52.2191631+01:00"
    },
    {
      "Query": "cups forbidden",
      "ExecutedDateTime": "2024-01-01T15:00:57.8817061+01:00"
    },
    {
      "Query": "cups group",
      "ExecutedDateTime": "2024-01-01T15:03:57.6140621+01:00"
    },
    {
      "Query": "cups forbidden",
      "ExecutedDateTime": "2024-01-01T15:04:20.9097964+01:00"
    },
    {
      "Query": "cups adding printer indefinetely",
      "ExecutedDateTime": "2024-01-01T15:22:16.8714708+01:00"
    },
    {
      "Query": "ter",
      "ExecutedDateTime": "2024-01-01T15:27:54.4235155+01:00"
    },
    {
      "Query": "thermostat ersetzen",
      "ExecutedDateTime": "2024-01-01T15:48:15.6576724+01:00"
    },
    {
      "Query": "youtube.com",
      "ExecutedDateTime": "2024-01-01T16:35:26.819627+01:00"
    },
    {
      "Query": "netflix.com",
      "ExecutedDateTime": "2024-01-01T16:35:38.4763478+01:00"
    },
    {
      "Query": "list members of a group linux",
      "ExecutedDateTime": "2024-01-01T17:00:17.7843462+01:00"
    },
    {
      "Query": "cups print a doc",
      "ExecutedDateTime": "2024-01-01T17:07:22.9261739+01:00"
    },
    {
      "Query": "cups add printer",
      "ExecutedDateTime": "2024-01-01T17:10:07.1341639+01:00"
    },
    {
      "Query": "cups modify existing printer",
      "ExecutedDateTime": "2024-01-01T17:12:07.868639+01:00"
    },
    {
      "Query": "set default destination cups",
      "ExecutedDateTime": "2024-01-01T17:16:29.7186889+01:00"
    },
    {
      "Query": "shutd",
      "ExecutedDateTime": "2024-01-01T17:26:09.2372679+01:00"
    },
    {
      "Query": "check cpu load",
      "ExecutedDateTime": "2024-01-01T18:48:15.1278695+01:00"
    },
    {
      "Query": "inebench",
      "ExecutedDateTime": "2024-01-01T18:50:11.3309254+01:00"
    },
    {
      "Query": "rpi",
      "ExecutedDateTime": "2024-01-01T19:29:50.5997172+01:00"
    },
    {
      "Query": "brave",
      "ExecutedDateTime": "2024-01-01T19:29:53.4467708+01:00"
    },
    {
      "Query": "moba",
      "ExecutedDateTime": "2024-01-01T19:35:29.9819882+01:00"
    },
    {
      "Query": "j",
      "ExecutedDateTime": "2024-01-01T19:35:51.866646+01:00"
    },
    {
      "Query": "rpi-beta.local",
      "ExecutedDateTime": "2024-01-01T19:37:35.3518221+01:00"
    },
    {
      "Query": "cups add printer",
      "ExecutedDateTime": "2024-01-01T19:38:01.6439154+01:00"
    },
    {
      "Query": "cups rest api",
      "ExecutedDateTime": "2024-01-01T19:53:22.7547493+01:00"
    },
    {
      "Query": "pom.xml for spring",
      "ExecutedDateTime": "2024-01-01T19:54:32.7158252+01:00"
    },
    {
      "Query": "spring build reactive rest api",
      "ExecutedDateTime": "2024-01-01T20:00:57.5533088+01:00"
    },
    {
      "Query": "post",
      "ExecutedDateTime": "2024-01-01T20:24:16.887667+01:00"
    },
    {
      "Query": "spring conditional on property",
      "ExecutedDateTime": "2024-01-01T20:28:21.1149447+01:00"
    },
    {
      "Query": "spring import configuration from another pacakg",
      "ExecutedDateTime": "2024-01-01T20:36:16.6564458+01:00"
    },
    {
      "Query": "spring having value conditional on property",
      "ExecutedDateTime": "2024-01-01T20:39:40.3137484+01:00"
    },
    {
      "Query": "spring conditional if property exists",
      "ExecutedDateTime": "2024-01-01T20:42:00.2391605+01:00"
    },
    {
      "Query": "conditional on property does not work",
      "ExecutedDateTime": "2024-01-01T20:44:04.529244+01:00"
    },
    {
      "Query": "debug spring to print environment",
      "ExecutedDateTime": "2024-01-01T20:46:30.7822864+01:00"
    },
    {
      "Query": "docker on raspberry pi zero w",
      "ExecutedDateTime": "2024-01-01T20:50:11.2653816+01:00"
    },
    {
      "Query": "tomcat listen on 0.0.0.0",
      "ExecutedDateTime": "2024-01-01T20:51:08.9381781+01:00"
    },
    {
      "Query": "install docker on linux",
      "ExecutedDateTime": "2024-01-01T20:52:40.1105945+01:00"
    },
    {
      "Query": "raspbian install docker",
      "ExecutedDateTime": "2024-01-01T20:53:34.5732623+01:00"
    },
    {
      "Query": "spring to docker",
      "ExecutedDateTime": "2024-01-01T20:59:00.0836993+01:00"
    },
    {
      "Query": "mvn build imag",
      "ExecutedDateTime": "2024-01-01T21:01:48.6697085+01:00"
    },
    {
      "Query": "Docker",
      "ExecutedDateTime": "2024-01-01T21:08:03.1144514+01:00"
    },
    {
      "Query": "ter",
      "ExecutedDateTime": "2024-01-01T21:08:11.0336853+01:00"
    },
    {
      "Query": "docker engine start indefinetely",
      "ExecutedDateTime": "2024-01-01T21:08:29.6333299+01:00"
    },
    {
      "Query": "github workflow to build spring boot app",
      "ExecutedDateTime": "2024-01-01T21:10:00.6998813+01:00"
    },
    {
      "Query": "docker",
      "ExecutedDateTime": "2024-01-01T21:10:37.0311173+01:00"
    },
    {
      "Query": "ter",
      "ExecutedDateTime": "2024-01-01T21:12:29.4147825+01:00"
    },
    {
      "Query": "optional",
      "ExecutedDateTime": "2024-01-01T21:13:10.32263+01:00"
    },
    {
      "Query": "restar",
      "ExecutedDateTime": "2024-01-01T21:13:41.1731892+01:00"
    },
    {
      "Query": "bing set up for lockscreen wallpapaer",
      "ExecutedDateTime": "2024-01-01T21:20:23.5623419+01:00"
    },
    {
      "Query": "inte",
      "ExecutedDateTime": "2024-01-01T21:20:24.9827141+01:00"
    },
    {
      "Query": "docker",
      "ExecutedDateTime": "2024-01-01T21:20:26.0477335+01:00"
    },
    {
      "Query": "build docker verbose output",
      "ExecutedDateTime": "2024-01-01T21:23:22.824675+01:00"
    },
    {
      "Query": "run mvnw clean package exit code 1",
      "ExecutedDateTime": "2024-01-01T21:24:02.4697891+01:00"
    },
    {
      "Query": "docker",
      "ExecutedDateTime": "2024-01-01T21:25:14.6834768+01:00"
    },
    {
      "Query": "docker run with interactive shell",
      "ExecutedDateTime": "2024-01-01T21:26:49.3930287+01:00"
    },
    {
      "Query": "post",
      "ExecutedDateTime": "2024-01-01T21:29:45.1991057+01:00"
    },
    {
      "Query": "send requerst to docker container",
      "ExecutedDateTime": "2024-01-01T21:30:42.6062637+01:00"
    },
    {
      "Query": "docker push to private registry",
      "ExecutedDateTime": "2024-01-01T21:33:09.9678325+01:00"
    },
    {
      "Query": "docker hub",
      "ExecutedDateTime": "2024-01-01T21:33:32.8265412+01:00"
    },
    {
      "Query": "moba",
      "ExecutedDateTime": "2024-01-01T21:37:36.9443754+01:00"
    },
    {
      "Query": "how to automatically pull newest docker image linux",
      "ExecutedDateTime": "2024-01-01T21:41:33.2764953+01:00"
    },
    {
      "Query": "The requested image\u0027s platform (linux/amd64) does not match the detected host platform (linux/arm/v6) and no specific platform was requested",
      "ExecutedDateTime": "2024-01-01T21:44:22.6548205+01:00"
    },
    {
      "Query": "exec /bin/sh: exec format error",
      "ExecutedDateTime": "2024-01-01T21:45:04.3579966+01:00"
    },
    {
      "Query": "rpi run docker containers",
      "ExecutedDateTime": "2024-01-01T21:45:09.6384553+01:00"
    },
    {
      "Query": "docker build arm",
      "ExecutedDateTime": "2024-01-01T21:45:53.1388938+01:00"
    },
    {
      "Query": "docker build --platform",
      "ExecutedDateTime": "2024-01-01T21:46:39.0387219+01:00"
    },
    {
      "Query": "docker build for raspberry pi",
      "ExecutedDateTime": "2024-01-01T21:49:01.4561515+01:00"
    },
    {
      "Query": "multi-platform build is not supported for the docker driver",
      "ExecutedDateTime": "2024-01-01T21:50:32.1293476+01:00"
    },
    {
      "Query": "failed to solve eclipse tmurin:21-jre-jammy no match for platform in manifest",
      "ExecutedDateTime": "2024-01-01T21:53:20.9117445+01:00"
    },
    {
      "Query": "armv6 eclipse temurin",
      "ExecutedDateTime": "2024-01-01T21:54:53.9711505+01:00"
    },
    {
      "Query": "linux install java21",
      "ExecutedDateTime": "2024-01-01T21:56:08.2248228+01:00"
    },
    {
      "Query": "jdk 21 for rpi",
      "ExecutedDateTime": "2024-01-01T22:06:48.6673983+01:00"
    },
    {
      "Query": "stea",
      "ExecutedDateTime": "2024-01-01T23:53:15.2628877+01:00"
    },
    {
      "Query": "BRA",
      "ExecutedDateTime": "2024-01-02T00:38:06.1083621+01:00"
    },
    {
      "Query": "youtube.com",
      "ExecutedDateTime": "2024-01-02T00:38:23.9896728+01:00"
    },
    {
      "Query": "bra",
      "ExecutedDateTime": "2024-01-02T12:03:43.591082+01:00"
    },
    {
      "Query": "amazon.de",
      "ExecutedDateTime": "2024-01-02T12:04:13.8876386+01:00"
    },
    {
      "Query": "nous socket blueberry",
      "ExecutedDateTime": "2024-01-02T12:08:15.7088207+01:00"
    },
    {
      "Query": "berrybase",
      "ExecutedDateTime": "2024-01-02T12:15:13.6874528+01:00"
    },
    {
      "Query": "k\u00FChlschrank maximale leistung",
      "ExecutedDateTime": "2024-01-02T12:20:32.1157004+01:00"
    },
    {
      "Query": "waschmaschine maximale leistung",
      "ExecutedDateTime": "2024-01-02T12:20:38.6386605+01:00"
    },
    {
      "Query": "multikochermaximale leistung",
      "ExecutedDateTime": "2024-01-02T12:20:44.5803278+01:00"
    },
    {
      "Query": "blender maximale leistnug",
      "ExecutedDateTime": "2024-01-02T12:20:50.0694308+01:00"
    },
    {
      "Query": "power larger as in specification mixer",
      "ExecutedDateTime": "2024-01-02T12:26:08.6793319+01:00"
    },
    {
      "Query": "sett",
      "ExecutedDateTime": "2024-01-02T12:52:40.7883196+01:00"
    },
    {
      "Query": "pm install Browser History",
      "ExecutedDateTime": "2024-01-02T12:52:51.1706561+01:00"
    },
    {
      "Query": "bra",
      "ExecutedDateTime": "2024-01-02T15:43:02.1888225+01:00"
    },
    {
      "Query": "noti",
      "ExecutedDateTime": "2024-01-02T15:44:19.6944292+01:00"
    },
    {
      "Query": "bra",
      "ExecutedDateTime": "2024-01-02T15:57:35.7007498+01:00"
    },
    {
      "Query": "amd",
      "ExecutedDateTime": "2024-01-02T16:59:16.7613491+01:00"
    },
    {
      "Query": "ste",
      "ExecutedDateTime": "2024-01-02T18:29:37.9460197+01:00"
    },
    {
      "Query": "no",
      "ExecutedDateTime": "2024-01-02T18:56:07.5723355+01:00"
    },
    {
      "Query": "bra",
      "ExecutedDateTime": "2024-01-02T18:56:09.7766765+01:00"
    },
    {
      "Query": "nous a3",
      "ExecutedDateTime": "2024-01-02T18:58:14.629496+01:00"
    },
    {
      "Query": "Nous W3 Smarte WLAN youtube",
      "ExecutedDateTime": "2024-01-02T19:01:51.0194715+01:00"
    },
    {
      "Query": "energy messer",
      "ExecutedDateTime": "2024-01-02T19:07:24.085728+01:00"
    },
    {
      "Query": "a1 vs a7 vs a8",
      "ExecutedDateTime": "2024-01-02T19:12:59.9295852+01:00"
    },
    {
      "Query": "stea",
      "ExecutedDateTime": "2024-01-02T19:44:25.119092+01:00"
    },
    {
      "Query": "brave",
      "ExecutedDateTime": "2024-01-02T19:47:45.0191499+01:00"
    },
    {
      "Query": "youtube.com",
      "ExecutedDateTime": "2024-01-02T19:47:49.3464069+01:00"
    },
    {
      "Query": "sett",
      "ExecutedDateTime": "2024-01-02T19:48:00.3769379+01:00"
    },
    {
      "Query": "n",
      "ExecutedDateTime": "2024-01-02T19:48:52.6838673+01:00"
    },
    {
      "Query": "na",
      "ExecutedDateTime": "2024-01-02T19:48:54.2460401+01:00"
    },
    {
      "Query": "n s",
      "ExecutedDateTime": "2024-01-02T19:49:08.8703048+01:00"
    },
    {
      "Query": "n",
      "ExecutedDateTime": "2024-01-02T19:49:13.2948041+01:00"
    },
    {
      "Query": "x4 foundations as x3 reddit",
      "ExecutedDateTime": "2024-01-02T19:49:38.3715307+01:00"
    },
    {
      "Query": "n",
      "ExecutedDateTime": "2024-01-02T22:13:17.1569892+01:00"
    },
    {
      "Query": "n f",
      "ExecutedDateTime": "2024-01-02T22:13:18.5366453+01:00"
    },
    {
      "Query": "x3 ap with mods",
      "ExecutedDateTime": "2024-01-02T22:25:52.136485+01:00"
    },
    {
      "Query": "stalker mods",
      "ExecutedDateTime": "2024-01-02T22:54:19.7648453+01:00"
    },
    {
      "Query": "the most popular stalker mods",
      "ExecutedDateTime": "2024-01-02T22:54:51.6503053+01:00"
    },
    {
      "Query": "stalker anomaly",
      "ExecutedDateTime": "2024-01-02T22:56:25.2944845+01:00"
    },
    {
      "Query": "fall",
      "ExecutedDateTime": "2024-01-02T23:21:35.2173861+01:00"
    },
    {
      "Query": "shu",
      "ExecutedDateTime": "2024-01-03T01:07:11.2449568+01:00"
    },
    {
      "Query": "brave",
      "ExecutedDateTime": "2024-01-03T13:34:45.7688512+01:00"
    },
    {
      "Query": "steam",
      "ExecutedDateTime": "2024-01-03T13:36:23.2999573+01:00"
    },
    {
      "Query": "shutd",
      "ExecutedDateTime": "2024-01-03T17:05:47.1055603+01:00"
    },
    {
      "Query": "bra",
      "ExecutedDateTime": "2024-01-04T13:40:32.4147371+01:00"
    },
    {
      "Query": "cloud gaming",
      "ExecutedDateTime": "2024-01-04T13:40:48.9488995+01:00"
    },
    {
      "Query": "vattenfal",
      "ExecutedDateTime": "2024-01-04T13:44:40.8905583+01:00"
    },
    {
      "Query": "24.5 / 250",
      "ExecutedDateTime": "2024-01-04T13:50:53.8686563+01:00"
    },
    {
      "Query": "0.3407*0.3",
      "ExecutedDateTime": "2024-01-04T13:52:20.0463281+01:00"
    },
    {
      "Query": "0.3407*0.32",
      "ExecutedDateTime": "2024-01-04T13:52:50.4060568+01:00"
    },
    {
      "Query": "18/240",
      "ExecutedDateTime": "2024-01-04T13:54:48.5574688+01:00"
    },
    {
      "Query": "18/120",
      "ExecutedDateTime": "2024-01-04T13:55:01.9098106+01:00"
    },
    {
      "Query": "9/240",
      "ExecutedDateTime": "2024-01-04T13:55:22.3491953+01:00"
    },
    {
      "Query": "9/120",
      "ExecutedDateTime": "2024-01-04T13:55:39.8770019+01:00"
    },
    {
      "Query": "9/120*2",
      "ExecutedDateTime": "2024-01-04T13:55:52.5647347+01:00"
    },
    {
      "Query": "my size 57",
      "ExecutedDateTime": "2024-01-04T14:12:19.0793279+01:00"
    },
    {
      "Query": "berrybas",
      "ExecutedDateTime": "2024-01-04T14:19:30.9508075+01:00"
    },
    {
      "Query": "Nous A8 idealo",
      "ExecutedDateTime": "2024-01-04T14:19:56.5410057+01:00"
    },
    {
      "Query": "berrybase was mit den berrys",
      "ExecutedDateTime": "2024-01-04T14:22:20.0948902+01:00"
    },
    {
      "Query": "webmail merseburg",
      "ExecutedDateTime": "2024-01-04T14:28:31.6224232+01:00"
    },
    {
      "Query": "thomas meier merseburg",
      "ExecutedDateTime": "2024-01-04T14:29:36.0190806+01:00"
    },
    {
      "Query": "fall",
      "ExecutedDateTime": "2024-01-04T14:40:03.7056256+01:00"
    },
    {
      "Query": "brave",
      "ExecutedDateTime": "2024-01-05T12:42:34.7304682+01:00"
    },
    {
      "Query": "meclee",
      "ExecutedDateTime": "2024-01-05T12:43:05.7610801+01:00"
    },
    {
      "Query": "t1p.de/ABH-Termin",
      "ExecutedDateTime": "2024-01-05T12:44:07.8262194+01:00"
    },
    {
      "Query": "1400*4",
      "ExecutedDateTime": "2024-01-05T12:49:07.0795959+01:00"
    },
    {
      "Query": "setti",
      "ExecutedDateTime": "2024-01-05T12:49:15.3868678+01:00"
    },
    {
      "Query": "pm install CurrencyPP",
      "ExecutedDateTime": "2024-01-05T12:50:03.3438129+01:00"
    },
    {
      "Query": "sett",
      "ExecutedDateTime": "2024-01-05T12:50:10.5481863+01:00"
    },
    {
      "Query": "1400*4",
      "ExecutedDateTime": "2024-01-05T12:50:59.6635434+01:00"
    },
    {
      "Query": "sett",
      "ExecutedDateTime": "2024-01-05T12:51:58.3054013+01:00"
    },
    {
      "Query": "vodafone.de",
      "ExecutedDateTime": "2024-01-05T12:55:08.1790529+01:00"
    },
    {
      "Query": "uni leipzig semseter beitrag",
      "ExecutedDateTime": "2024-01-05T12:56:46.735689+01:00"
    },
    {
      "Query": "youtube.com",
      "ExecutedDateTime": "2024-01-05T14:55:12.8225933+01:00"
    },
    {
      "Query": "netflix.com",
      "ExecutedDateTime": "2024-01-05T14:55:54.419266+01:00"
    },
    {
      "Query": "docker container for arm",
      "ExecutedDateTime": "2024-01-05T15:15:25.1267164+01:00"
    },
    {
      "Query": "ter",
      "ExecutedDateTime": "2024-01-05T15:15:26.4823498+01:00"
    },
    {
      "Query": "moba",
      "ExecutedDateTime": "2024-01-05T15:15:31.2849828+01:00"
    },
    {
      "Query": "ter",
      "ExecutedDateTime": "2024-01-05T16:04:18.1493913+01:00"
    },
    {
      "Query": "inte",
      "ExecutedDateTime": "2024-01-05T16:04:35.7305713+01:00"
    },
    {
      "Query": "running java in container in raspberry pi",
      "ExecutedDateTime": "2024-01-05T16:04:49.4572702+01:00"
    },
    {
      "Query": "jet",
      "ExecutedDateTime": "2024-01-05T16:07:10.5490963+01:00"
    },
    {
      "Query": "docker",
      "ExecutedDateTime": "2024-01-05T16:08:22.1728259+01:00"
    },
    {
      "Query": "arm32v7/adoptopenjdk: no match for platform in manifest",
      "ExecutedDateTime": "2024-01-05T16:09:09.3019069+01:00"
    },
    {
      "Query": "rpi check architecture version",
      "ExecutedDateTime": "2024-01-05T16:10:13.3054719+01:00"
    },
    {
      "Query": "alternatives remove jdk",
      "ExecutedDateTime": "2024-01-05T16:13:10.6092889+01:00"
    },
    {
      "Query": "armv6 jdk",
      "ExecutedDateTime": "2024-01-05T16:14:33.5869408+01:00"
    },
    {
      "Query": "armv6 docker image",
      "ExecutedDateTime": "2024-01-05T16:16:03.3092255+01:00"
    },
    {
      "Query": "The requested image\u0027s platform (linux/arm/v6) does not match the host platform",
      "ExecutedDateTime": "2024-01-05T16:19:37.4300068+01:00"
    },
    {
      "Query": "run armv6 docker image on amd64",
      "ExecutedDateTime": "2024-01-05T16:20:27.5970185+01:00"
    },
    {
      "Query": "zulu embedded",
      "ExecutedDateTime": "2024-01-05T16:22:13.1327436+01:00"
    },
    {
      "Query": "arm hf vs sf",
      "ExecutedDateTime": "2024-01-05T16:23:07.5239742+01:00"
    },
    {
      "Query": "armv6 docker image",
      "ExecutedDateTime": "2024-01-05T16:24:36.1557846+01:00"
    },
    {
      "Query": "spring boot 3.2.1",
      "ExecutedDateTime": "2024-01-05T16:26:50.681333+01:00"
    },
    {
      "Query": "spring boot 3.0",
      "ExecutedDateTime": "2024-01-05T16:28:36.1914051+01:00"
    },
    {
      "Query": "java 17 armv6",
      "ExecutedDateTime": "2024-01-05T16:29:22.8856789+01:00"
    },
    {
      "Query": "BellSoft\u0027s Java 17  armv6",
      "ExecutedDateTime": "2024-01-05T16:30:42.4428831+01:00"
    },
    {
      "Query": "best language for rpi zero w",
      "ExecutedDateTime": "2024-01-05T16:32:04.7694459+01:00"
    },
    {
      "Query": "java on pi zero reddit",
      "ExecutedDateTime": "2024-01-05T16:33:18.4364736+01:00"
    },
    {
      "Query": "python or java on raspberry pi zero reddit",
      "ExecutedDateTime": "2024-01-05T16:35:06.3397022+01:00"
    },
    {
      "Query": "java or python better for embeded",
      "ExecutedDateTime": "2024-01-05T16:37:54.4161602+01:00"
    },
    {
      "Query": "post",
      "ExecutedDateTime": "2024-01-05T16:41:17.6606248+01:00"
    },
    {
      "Query": "run jar java",
      "ExecutedDateTime": "2024-01-05T16:43:05.2061334+01:00"
    },
    {
      "Query": "java raspberry pi armv6",
      "ExecutedDateTime": "2024-01-05T16:44:08.3467523+01:00"
    },
    {
      "Query": "python cups library",
      "ExecutedDateTime": "2024-01-05T16:50:40.3794957+01:00"
    },
    {
      "Query": "pych",
      "ExecutedDateTime": "2024-01-05T16:54:09.9958995+01:00"
    },
    {
      "Query": "raspberry pi lightweight http server",
      "ExecutedDateTime": "2024-01-05T16:54:47.9425913+01:00"
    },
    {
      "Query": "java lightweight http server",
      "ExecutedDateTime": "2024-01-05T16:55:09.6920133+01:00"
    },
    {
      "Query": "performace of python vs java http server",
      "ExecutedDateTime": "2024-01-05T16:56:20.5417485+01:00"
    },
    {
      "Query": "py",
      "ExecutedDateTime": "2024-01-05T17:00:16.0201296+01:00"
    },
    {
      "Query": "fastapi vs flask",
      "ExecutedDateTime": "2024-01-05T17:00:29.7864999+01:00"
    },
    {
      "Query": "simple flask",
      "ExecutedDateTime": "2024-01-05T17:02:31.601897+01:00"
    },
    {
      "Query": "python no module",
      "ExecutedDateTime": "2024-01-05T17:06:24.817268+01:00"
    },
    {
      "Query": "flask run on 0.0.0.0",
      "ExecutedDateTime": "2024-01-05T17:18:34.8678883+01:00"
    },
    {
      "Query": "python cups",
      "ExecutedDateTime": "2024-01-05T17:20:09.2969048+01:00"
    },
    {
      "Query": "pycups documentation",
      "ExecutedDateTime": "2024-01-05T17:22:22.5718133+01:00"
    },
    {
      "Query": "error: Microsoft Visual C\u002B\u002B 14.0 or greater is required. Get it with \u0022Microsoft C\u002B\u002B Build Tools\u0022",
      "ExecutedDateTime": "2024-01-05T17:24:17.2366258+01:00"
    },
    {
      "Query": "brave",
      "ExecutedDateTime": "2024-01-05T17:47:13.0034722+01:00"
    },
    {
      "Query": "HostX86\\\\x64\\\\cl.exe",
      "ExecutedDateTime": "2024-01-05T17:47:16.9289262+01:00"
    },
    {
      "Query": "HostX86\\\\x64\\\\cl.exe failed with",
      "ExecutedDateTime": "2024-01-05T18:28:16.397161+01:00"
    },
    {
      "Query": "ter",
      "ExecutedDateTime": "2024-01-05T18:29:30.3580659+01:00"
    },
    {
      "Query": "py",
      "ExecutedDateTime": "2024-01-05T18:30:00.7335047+01:00"
    },
    {
      "Query": "cups install windows",
      "ExecutedDateTime": "2024-01-05T18:30:50.2778067+01:00"
    },
    {
      "Query": "wsl",
      "ExecutedDateTime": "2024-01-05T18:33:40.8780459+01:00"
    },
    {
      "Query": "ter",
      "ExecutedDateTime": "2024-01-05T18:33:48.7833774+01:00"
    },
    {
      "Query": "cups/http.h: No such file or directory",
      "ExecutedDateTime": "2024-01-05T18:37:38.5179167+01:00"
    },
    {
      "Query": "pycharm use wsl python interp",
      "ExecutedDateTime": "2024-01-05T18:38:23.302151+01:00"
    },
    {
      "Query": "pycups documentation",
      "ExecutedDateTime": "2024-01-05T18:40:34.7787478+01:00"
    },
    {
      "Query": "python object as dict",
      "ExecutedDateTime": "2024-01-05T18:44:15.1356523+01:00"
    },
    {
      "Query": "post",
      "ExecutedDateTime": "2024-01-05T18:45:56.4959888+01:00"
    },
    {
      "Query": "moba",
      "ExecutedDateTime": "2024-01-05T18:46:20.1654246+01:00"
    },
    {
      "Query": "netflix.com",
      "ExecutedDateTime": "2024-01-05T18:48:19.7043852+01:00"
    },
    {
      "Query": "java lightwei",
      "ExecutedDateTime": "2024-01-05T19:01:56.2471156+01:00"
    },
    {
      "Query": "Caused by: java.lang.ClassNotFoundException: coden.App",
      "ExecutedDateTime": "2024-01-05T19:03:20.2898919+01:00"
    },
    {
      "Query": "mvn specify main class",
      "ExecutedDateTime": "2024-01-05T19:03:53.722893+01:00"
    },
    {
      "Query": "java leightweight  with router",
      "ExecutedDateTime": "2024-01-05T19:10:29.4764033+01:00"
    },
    {
      "Query": "kotlin leightweight http server",
      "ExecutedDateTime": "2024-01-05T19:14:08.5176959+01:00"
    },
    {
      "Query": "Javalin: It looks like you don\u0027t have a logger in your project.",
      "ExecutedDateTime": "2024-01-05T19:17:27.0770217+01:00"
    },
    {
      "Query": "javalin does not see slf4j",
      "ExecutedDateTime": "2024-01-05T19:20:20.2998511+01:00"
    },
    {
      "Query": "Failed to load class \u0022org.slf4j.impl.StaticLoggerBinder\u0022.",
      "ExecutedDateTime": "2024-01-05T19:22:37.0567104+01:00"
    },
    {
      "Query": "mvn no manifest attribute",
      "ExecutedDateTime": "2024-01-05T19:29:12.3811032+01:00"
    },
    {
      "Query": "fat maven",
      "ExecutedDateTime": "2024-01-05T19:30:51.2281267+01:00"
    },
    {
      "Query": "java is so slow raspberry pi",
      "ExecutedDateTime": "2024-01-05T19:35:15.9664092+01:00"
    },
    {
      "Query": "java is very slow on raspberry pi zero",
      "ExecutedDateTime": "2024-01-05T19:39:39.0301435+01:00"
    },
    {
      "Query": "netflix.com",
      "ExecutedDateTime": "2024-01-05T19:41:05.0393914+01:00"
    },
    {
      "Query": "java -jar specify cp",
      "ExecutedDateTime": "2024-01-05T19:53:12.51538+01:00"
    },
    {
      "Query": "cp java jar",
      "ExecutedDateTime": "2024-01-05T19:54:30.9518667+01:00"
    },
    {
      "Query": "fat jar is",
      "ExecutedDateTime": "2024-01-05T19:55:08.7820552+01:00"
    },
    {
      "Query": "maven add to jar external dependencies",
      "ExecutedDateTime": "2024-01-05T19:57:31.6755127+01:00"
    },
    {
      "Query": "maven shade",
      "ExecutedDateTime": "2024-01-05T20:02:05.7759477+01:00"
    },
    {
      "Query": "mvn shade plugin no",
      "ExecutedDateTime": "2024-01-05T20:03:24.0759111+01:00"
    },
    {
      "Query": "Invalid signature file digest for Manifest main attributes shaded",
      "ExecutedDateTime": "2024-01-05T20:04:35.5644318+01:00"
    },
    {
      "Query": "cups-pdf",
      "ExecutedDateTime": "2024-01-05T20:18:03.5611989+01:00"
    },
    {
      "Query": "kotlin fat jar",
      "ExecutedDateTime": "2024-01-05T20:33:31.4071835+01:00"
    },
    {
      "Query": "kotlin lightweight http server",
      "ExecutedDateTime": "2024-01-05T20:37:10.8146551+01:00"
    },
    {
      "Query": "http4k maven",
      "ExecutedDateTime": "2024-01-05T20:42:22.881831+01:00"
    },
    {
      "Query": "http4k examples",
      "ExecutedDateTime": "2024-01-05T20:50:07.8791239+01:00"
    },
    {
      "Query": "http4k json examples",
      "ExecutedDateTime": "2024-01-05T20:52:09.6332364+01:00"
    },
    {
      "Query": "stea",
      "ExecutedDateTime": "2024-01-05T21:23:36.7740125+01:00"
    },
    {
      "Query": "xrm mod x3",
      "ExecutedDateTime": "2024-01-05T21:24:45.9322766+01:00"
    },
    {
      "Query": "apps",
      "ExecutedDateTime": "2024-01-05T21:25:45.0739743+01:00"
    },
    {
      "Query": "anomaly stalker steam",
      "ExecutedDateTime": "2024-01-05T21:45:43.3987543+01:00"
    },
    {
      "Query": "stea",
      "ExecutedDateTime": "2024-01-05T22:09:25.6132411+01:00"
    },
    {
      "Query": "bra",
      "ExecutedDateTime": "2024-01-06T12:31:08.151367+01:00"
    },
    {
      "Query": "youtube.com",
      "ExecutedDateTime": "2024-01-06T12:31:24.7113437+01:00"
    },
    {
      "Query": "sett",
      "ExecutedDateTime": "2024-01-06T12:36:20.5977819+01:00"
    }
  ]
}